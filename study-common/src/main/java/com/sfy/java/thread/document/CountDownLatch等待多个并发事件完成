CountDownLatch类
CountDownLatch允许1个或者多个线程一直等待，直到一组操作执行完成。它初始一个整数值，此值是线程将要等待的操作数。当某个线程为了想要执行这些操作而等待时， 它要使用 await()方法。此方法让线程进入休眠直到操作完成。 当某个操作结束，它使用countDown() 方法来减少CountDownLatch类的内部计数器。当计数器到达0时，这个类会唤醒全部使用await() 方法休眠的线程们。

声明并实例化一个CountDownLatch
private final CountDownLatch controller = new CountDownLatch(number);

CountDownLatch类的三个基本元素
1. 初始值决定CountDownLatch类需要等待的事件的数量。
2. await() 方法, 被等待全部事件终结的线程调用。
3. countDown() 方法，事件在结束执行后调用。

CountDownLatch执行流程
当创建 CountDownLatch 对象时，对象使用构造函数的参数来初始化内部计数器。每次调用 countDown() 方法, CountDownLatch 对象内部计数器减一。当内部计数器达到0时， CountDownLatch 对象唤醒全部使用 await() 方法睡眠的线程们。
不可能重新初始化或者修改CountDownLatch对象的内部计数器的值。一旦计数器的值初始后，唯一可以修改它的方法就是之前用的 countDown() 方法。当计数器到达0时， 全部调用 await() 方法会立刻返回，接下来任何countDown() 方法的调用都将不会造成任何影响。
CountDownLatch 机制不是用来保护共享资源或者临界区。它是用来同步一个或者多个执行多个任务的线程。它只能使用一次。像之前解说的，一旦CountDownLatch的计数器到达0，任何对它的方法的调用都是无效的。如果你想再次同步，你必须创建新的对象。

public class Videoconference implements Runnable{

	private final CountDownLatch controller;

	public Videoconference(int number) {
		controller=new CountDownLatch(number);
	}

	public void arrive(String name){
		System.out.printf("%s has arrived.",name);
		controller.countDown();
		System.out.printf("VideoConference: Waiting for %d participants.\n",controller.getCount());

		@Override
		public void run() {
			System.out.printf("VideoConference: Initialization: %d participants.\n",controller.getCount());
			try {
				controller.await();
				System.out.printf("VideoConference: All the participants have come\n");
				System.out.printf("VideoConference: Let's start...\n");
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}