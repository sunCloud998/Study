Callable接口
此接口有一个call()方法。在这个方法中，你必须实现任务的（处理）逻辑。Callable接口是一个泛型接口。意味着你必须表明call()方法返回的数据类型。

Future接口
此接口有一些方法来保证Callable对象结果的获取和管理它的状态。

创建ThreadPoolExecutor来运行任务
ThreadPoolExecutor executor=(ThreadPoolExecutor)Executors.newFixedThreadPool(2);

创建一个类实现Callable接口并实现call方法
public class ClassName implements Callable<Integer> {

    @Override
    public Integer call() throws Exception {
        //业务逻辑处理....
    }
}

调用执行者的submit()方法来提交任务
Future<Integer> result=executor.submit(className);

获取已经完成的任务数量
executor.getCompletedTaskCount();

获取任务返回值
Integer number = result.get();
这个方法会等待，直到Callable对象完成call()方法的执 行，并且返回它的结果。如果线程在get()方法上等待结果时被中断，它将抛出InterruptedException异常。如果call()方法抛出 异常，这个方法会抛出ExecutionException异常。

结束执行者
executor.shutdown();

检查任务是否已经完成
result.isDone()

运行多个任务并处理第一个结果
//<T> T invokeAny(Collection<? extends Callable<T>> tasks)输入实现Callable接口的对象集合，返回Callable中声明的类型
String result = executor.invokeAny(taskList);
ThreadPoolExecutor类中的invokeAny()方法接收任务数列，并启动它们，返回完成时没有抛出异常的第一个 任务的结果。该方法返回的数据类型与启动任务的call()方法返回的类型一样。
假设有两个任务，调用invokeAny()方法返回true值或抛出异常。有以下4种情况
两个任务都返回true，invokeAny()方法的结果是第一个完成任务的名称。
第一个任务返回true，第二个任务抛出异常。invokeAny()方法的结果是第一个任务的名称。
第一个任务抛出异常，第二个任务返回true。invokeAny()方法的结果是第二个任务的名称。
两个任务都抛出异常，invokeAny()方法抛出一个ExecutionException异常。

运行多个任务并处理所有结果
等待一个任务完成，可以使用以下三种方法
如果任务执行完成，Future接口的isDone()方法将返回true。缺点：只能控制一个任务的完成
ThreadPoolExecutor类的awaitTermination()方法使线程进入睡眠，直到每一个任务调用shutdown()方法之后完成执行。缺点：必须等待一个线程来关闭执行者，否则这个方法的调用立即返回。
invokeAll()方法提交任务列表给执行者，并且在这个列表上等待所有任务的完成，推荐使用
List<Future<T>> resultList = executor.invokeAll(taskList)

invokeAll()
这个方法接收Callable对象列表和返回 Future对象列表。这个列表将会有列表中每个任务的一个Future对象。


使用示例
public class TaskWithResult implements Callable<String> {
	private int id;

	public TaskWithResult(int id) {
		this.id = id;
	}

	@Override
	public String call() throws Exception {
		return "result of TaskWithResult " + id;
	}
}

public class CallableTest {
	public static void main(String[] args) throws InterruptedException,
			ExecutionException {
		ExecutorService exec = Executors.newCachedThreadPool();
		ArrayList<Future<String>> results = new ArrayList<Future<String>>();	//Future 相当于是用来存放Executor执行的结果的一种容器
		for (int i = 0; i < 10; i++) {
			results.add(exec.submit(new TaskWithResult(i)));
		}
		for (Future<String> fs : results) {
			if (fs.isDone()) {
				System.out.println(fs.get());
			} else {
				System.out.println("Future result is not yet complete");
			}
		}
		exec.shutdown();
	}
}
