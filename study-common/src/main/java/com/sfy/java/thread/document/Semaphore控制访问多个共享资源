Semaphore机制
Semaphore是一个控制访问多个共享资源的计数器。

当一个线程想要访问某个共享资源，首先，它必须获得semaphore。如果semaphore的内部计数器的值大于0，那么semaphore减少计数器的值并允许访问共享的资源。计数器的值大于0表示，有可以自由使用的资源，所以线程可以访问并使用它们。
如果semaphore的计数器的值等于0，那么semaphore让线程进入休眠状态一直到计数器大于0。计数器的值等于0表示全部的共享资源都正被线程们使用，所以此线程想要访问就必须等到某个资源成为自由的。
当线程使用完共享资源时，他必须放出semaphore为了让其他线程可以访问共享资源。这个操作会增加semaphore的内部计数器的值。

声明并实例化一个Semaphore对象
private final Semaphore semaphore = new Semaphore(1);

acquire()方法
semaphore.acquire();

release()方法
finally {
	semaphore.release();
}

Semaphore()方法
初始化Semaphore对象时，需要传入一个int类型的参数。你传递值1作为此构造方法的参数，那么你就创建了一个binary semaphore。初始值为1，就保护了访问一个共享资源，如果使用3作为参数的，前3个调用acquire() 方法的线程会获得临界区的访问权，其余的都会被阻塞 。
假设创建10个线程并启动，当第一个获得semaphore的得到critical section的访问权。剩下的线程都会被semaphore阻塞直到那个获得semaphore的线程释放它。当这情况发生，semaphore在等待的线程中选择一个并给予它访问critical section的访问权。

使用semaphore保护共享资源的步骤
1. 调用acquire()方法获得semaphore。
2. 对共享资源做出必要的操作。
3. 调用release()方法来释放semaphore。

acquire()的重载方法
acquireUninterruptibly()
acquire()方法是当semaphore的内部计数器的值为0时，阻塞线程直到semaphore被释放。在阻塞期间，线程可能会被中断，然后此方法抛出InterruptedException异常。而此版本的acquire方法会忽略线程的中断而且不会抛出任何异常。

tryAcquire()
此方法会尝试获取semaphore。如果成功，返回true。如果不成功，返回false值，并不会被阻塞和等待semaphore的释放。

Semaphores的公平性
Semaphore(int permits, boolean fair)
Semaphores默认情况下是非公平模式的，在这个模式中，当同步资源释放，就会从等待的线程中任意选择一个获得资源，但是这种选择没有任何标准。而公平模式可以改变这个行为并强制选择等待最久时间的线程。
Semaphore类的构造函数容许第二个参数。这个参数必需是 Boolean 值。如果你给的是 false 值，那么创建的semaphore就会在非公平模式下运行。如果你不使用这个参数，是跟给false值一样的结果。如果你给的是true值，那么你创建的semaphore就会在公平模式下运行。
