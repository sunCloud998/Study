线程中断
离开线程有两种常用的方法：抛出InterruptedException和用Thread.interrupted()检查是否发生中断
1.在执行阻塞操作时，如：Thread.sleep()时被中断会抛出InterruptedException
2.Thread.interrupted()检查是否发生中断.Thread.interrupted()能告诉你线程是否发生中断,并将清除中断状态标记，所以程序不会两次通知你线程发生了中断．
例子：
class ATask implements Runnable{

	private double d = 0.0;

	public void run() {

		try {
		//检查程序是否发生中断
		while (!Thread.interrupted()) {
			System.out.println("I am running!");
			//point1 before sleep
			Thread.sleep(20);
			//point2 after sleep
			System.out.println("Calculating");
			for (int i = 0; i < 900000; i++) {
				d = d + (Math.PI + Math.E) / d;
			}
		}

		} catch (InterruptedException e) {
			System.out.println("Exiting by Exception");
		}

		System.out.println("ATask.run() interrupted!");
	}
}
在point1之前和point2之后发生中断会产生两种不同的结果：
如果在point1之前发生中断，程序会在调用Thread.sleep()时抛出InterruptedException从而结束线程．
如果在point2之后发生中断，线程会继续执行到下一次while判断中断状态时结束线程.

isInterrupted()和interrupted()方法都能检查线程是否发生中断，但是两个方法有着重要的区别：
1.第一个不会改变interrupted属性值，但是第二个会设置成false。
2.interrupted() 方法是一个静态方法，建议使用isInterrupted()方法。