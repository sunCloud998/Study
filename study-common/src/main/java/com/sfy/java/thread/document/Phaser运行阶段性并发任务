Phaser类
Phaser类主要用来运行阶段性的并发任务。当某些并发任务是分成多个步骤来执行时，那么此机制是非常有用的。Phaser类提供的机制是在每个步骤的结尾同步线程，所以除非全部线程完成第一个步骤，否则线程不能开始进行第二步。

Phaser对象可能存在这两状态
1. Active: 当 Phaser 接受新的参与者注册，它进入这个状态，并且在每个phase的末端同步。
2. Termination: 默认状态，当Phaser里全部的参与者都取消注册，它进入这个状态，所以这时 Phaser 有0个参与者。更具体的说，当onAdvance() 方法返回真值时，Phaser 是在这个状态里。如果你覆盖那个方法,你可以改变它的默认行为。当 Phaser 在这个状态，同步方法 arriveAndAwaitAdvance()会 立刻返回，不会做任何同步。

arrive()
此方法示意phaser某个参与者已经结束actual phase了，但是他应该等待其他的参与者才能继续执行。小心使用此法，因为它并不能与其他线程同步。

awaitAdvance(int phase)
如果我们传递的参数值等于phaser的actual phase，此方法让当前线程进入睡眠直到phaser的全部参与者结束当前的phase。如果参数值与phaser 的 actual phase不等，那么立刻返回。

awaitAdvanceInterruptibly(int phaser)
此方法等同与之前的方法，只是在线程正在此方法中休眠而被中断时候，它会抛出InterruptedException 异常。

register()
此方法为Phaser添加一个新的参与者。这个新加入者会被认为是还未到达 actual phase

bulkRegister(int Parties)
此方法为Phaser添加一个特定数量的参与者。这些新加入的参与都会被认为是还未到达 actual phase

arriveAndDeregister()
减少参与者数量的方法，它通知phaser线程已经结束了actual phase,而且他不想继续phased的操作了。

forceTermination()
改变phaser的状态，让它直接进入Termination 状态，不在乎已经在phaser中注册的参与者的数量。此机制可能会很有用在一个参与者出现异常的情况下来强制结束phaser

当phaser在 Termination 状态， awaitAdvance() 和 arriveAndAwaitAdvance() 方法立刻返回一个负值，而不是一般情况下的正值如果你知道你的phaser可能终止了，那么你可以用这些方法来确认他是否真的终止了。





