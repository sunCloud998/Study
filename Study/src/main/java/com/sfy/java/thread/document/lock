声明一个Lock对象
private final Lock queueLock=new ReentrantLock();
通过调用lock()方法来获取Lock对象的控制权
queueLock.lock();
通过调用unlock()方法来释放Lock对象的控制
finally {
    queueLock.unlock();
}
当一个线程A调用这个方法时，如果 没有其他线程持有这个锁的控制权，那么这个方法就会给线程A分配这个锁的控制权并且立即返回允许线程A执行这个临界区。否则，如果其他线程B正在执行由这 个锁控制的临界区，lock()方法将会使线程A睡眠直到线程B完成这个临界区的执行。
tryLock()方法:
这个方法与lock()方法的最大区别是，如果一 个线程调用这个方法不能获取Lock接口的控制权时，将会立即返回并且不会使这个线程进入睡眠。这个方法返回一个boolean值，true表示这个线程 获取了锁的控制权，false则表示没有。

对锁开启公平模式
private Lock queueLock=new ReentrantLock(true);
在ReentrantLock类和 ReentrantReadWriteLock类的构造器中允许传入一个boolean类型的参数，默认值为false(非公平模式)，设置为true开启公平模式。
非公平模式：
在这个模式中，当有多个线程正在等待一把锁（ReentrantLock或者 ReentrantReadWriteLock），这个锁必须选择它们中间的一个来获得进入临界区，选择任意一个是没有任何标准的。
公平模式：
在这个模式中，当有多个线程正在等待一把锁（ReentrantLock或者ReentrantReadWriteLock），这个锁必须选择它们 中间的一个来获得进入临界区，它将选择等待时间最长的线程。