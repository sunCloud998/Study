线程池
基本思想还是一种对象池的思想，开辟一块内存空间，里边存放了多个（未死亡）的线程，池中线程执行调度由池管理器来处理。当有任务提交时需要一个线程，并不着急立刻创建线程，而是检查池中是否有空闲线程，如果有，则从池中取一个，执行完成后线程对象归池，若没有则去创建新的线程。这样可以避免反复创建线程对象带来的性能开销，节省系统资源。

线程池的作用
进行线程的复用，减少反复创建和销毁线程的开销，每个线程都可以被重复利用，执行多次任务。
及时响应。当请求到达时，通常工作线程已经存在，因此不用等待创建线程而延迟任务的执行，提高响应性。
控制系统中线程执行的数量。可以根据系统的业务和环境情况，自动或手动设置线程数量，达到运行的最佳效果。防止因为消耗过多的内存，而把服务器拖死。（每个线程需要大约1M内存，线程开的越多，消耗的内存就越大，最后死机）

线程池必备元素
线程池管理器（ThreadPoolManager）：用于创建并管理线程池
工作线程（WorkThread）：线程池中的线程
任务接口（Task）：每个任务必须实现的接口，以供工作现场调度任务的执行
任务队列： 用于存放没有处理的任务，提供一种缓存机制

Executor比重要的类
类名              	            作用
Executor	                线程池的顶级接口。用来提交Runnable任务，只有execute(Runnable command)方法。这个接口将任务提交与任务执行隔离起来：拥有不同执行策略的executor都实现了同一个提交接口。改变执行策略不会影响任务的提交逻辑。
ExecutorService	            真正线程池的接口，提供shutDown(),isShutDown(),isTerminated(),submit(Callable task)方法。它（及其子类）的实例，表示一个线程池。
ScheduledExecutorService	和Timer/TimerTask类似，解决那些需要任务重复执行的问题。
ThreadPoolExecutor	        ExecutorService的默认实现。ThreadPoolExecutor管理着一个线程池和一个工作队列，线程池存放着用于执行任务的工作线程。
Executors	                线程池工厂类，可以创建不同特性的线程池。（返回不同的ExecutorService实例）
ScheduledThreadPoolExecutor	继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。

创建一个线程执行者
使用Executors工厂类来创建ThreadPoolExecutor，一旦有执行者，你就可以提交Runnable或Callable对象给执行者来执行。
private ThreadPoolExecutor executor = (ThreadPoolExecutor)Executors.newCachedThreadPool();

Executors工厂类的主要方法
newFixedThreadPool(int size)
创建固定线程数量的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的corePoolSize大小。线程的大小一旦达到corePoolSize值就会保持不变。如果某个线程因为执行异常而结束，则线程池会补充一个新的线程。当达到线程最大值时，新到达的任务会暂存在任务到任务队列中，等待有线程空闲时再运行。

newSingleThreadedExecutor()
创建一个单线程的线程池，只有一个线程在工作，相当于当线程串行执行所有任务。如果这个唯一的线程异常结束，则会创建一个新的线程来代替。它可以保证所有的任务都在一个单线程中执行。

newCachedThreadPool()
创建一个可缓存的线程池。不对线程池大小做任何限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。如果当前线程池的线程数量超过处理需求时，将回收空闲的（默认60s不执行任务）线程。当任务数增加时，线程池会只能增加添加新的线程来处理任务。

newScheduledThreadPool()
创建一个大小无限的线程池，支持定时及周期性执行任务的需求。


调用执行者的execute()方法来提交这个任务
//task实现Runnable或者Callable接口
executor.execute(task);

调用执行者的shutdown()方法来结束任务执行
executor.shutdown();

线程池中常用的方法
getPoolSize()
此方法返回线程池实际的线程数。
getActiveCount()
此方法返回在执行者中正在执行任务的线程数。
getCompletedTaskCount()
此方法返回执行者完成的任务数。
getLargestPoolSize()
返回池中某一时刻最大的线程数
getTaskCount()
显示有多少个任务已经提交给执行者。
shutdown()
结束执行者，调用shutdown()方法之后，如果你试图提交其他任务给执行者，它将会拒绝，但是仍在队列中的任务会被继续处理完
isShutdown()
如果你在执行者中调用shutdown()方法，此方法返回true
shutdownNow()
此方法立即关闭执行者。它不会执行待处理的任务，但是它会返回待处理任务的列表。当你调用这个方法时，正在运行的任务继续它们的执行，但这个方法并不会等待它们的结束。
isTerminated()
如果你已经调用shutdown()或shutdownNow()方法，并且执行者完成关闭它的处理时，此方法返回true。
awaitTermination(long timeout, TimeUnit unit)
此方法阻塞调用线程，直到执行者的任务结束或超时

自定义线程池ThreadPoolExecutor
 public ThreadPoolExecutor(int corePoolSize,
                               int maximumPoolSize,
                               long keepAliveTime,
                               TimeUnit unit,
                               BlockingQueue<Runnable> workQueue,
                               ThreadFactory threadFactory,
                               RejectedExecutionHandler handler);

参数说明
corePoolSize：池中所保存的线程数，包括空闲线程
maxPoolSize：池中允许的最大线程数
keepAlive：当线程池线程数量超过corePoolSize时，多余的空闲线程的存活时间。超过corePoolSize的空闲线程，在多长时间内会被销毁。
unit:：keepAliveTime的时间单位
workQueue： 任务队列，被提交但尚未被执行的任务
threadFactory：线程工厂，用于创建线程，一般用默认的即可
handler： 拒绝策略，当任务太多来不及处理（超过线程范围和队列容量），如何拒绝任务

队列和线程池的交互
运行的线程<corePoolSize，Executor添加新的线程，而不进行排队。
运行的线程>=corePoolSize，则Executor将请求加入队列
无法加入请求队列，线程数>maximumPoolSize，拒绝任务

如果当前任务数已达到corePoolSize并且小于maximumPoolSize,再有新的任务时，不是创建线程，而是放入队列中，直到队列中满，才会创建新的线程。
如果队列为无界队列，则永远不会使用maximumPoolSize参数，线程池大小一直维持corePoolSize。

队列分类
直接提交
SynchronousQueue并不是一个正在的队列，它是一种在线程直接进行同步移交的机制。要将一个元素放入SynchronousQueue中，必须有一个线程正在等待接受这个元素。如果没有线程正在等待，并且线程池的当前大小<maximumPoolSize，则ThreadPoolExecutor将创建一个新线程，否则根据饱和策略执行拒绝。直接提交队列通常要求无界（maximumPoolSizes无穷大）以避免拒绝新提交的任务。
无界队列
LinkedBlockingQueue无界队列，但可以指定队列大小。
有界队列
ArrayBlockingQueue使用有界队列，当等待线程占满队列时，创建新的线程直到maximumPoolSize。使用maximumPoolSizes时，有界队列有助于防止资源耗尽，但可能较难调整和控制。
优先任务队列
PriorityBlockingQueue可以根据任务自身的优先级顺序先后执行,必须实现Comparable接口，优先队列会根据接口对任务排序。

BlockingQueue队列的选择
同步提交策略(SynchronousQueue)
工作队列默认选项。使用SynchronousQueue高效，因为任务会直接移交给执行它的线程，而不是在队列中等待工作线程提取改任务。
当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。
NewCachedThreadPool工厂方法中用了此队列。
注意：只有当线程池是无界或者可以拒绝任务时，SynchronousQueue才有实际价值。

无界队列策略LinkedBlockingQueue
当每个任务完全独立，适用于使用无界队列。例如：web服务器中。这种队列可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。
newFixedThreadPool使用此队列，如果运行的线程等于或多于 corePoolSize，则 Executor 始终首选将请求加入队列，而不添加新的线程。
注意防止任务疯长，比如任务运行的时间比较长，而添加任务的速度远远超过任务处理的时间，而且还不断增加，不一会就爆了。

有界队列(ArrayBlockingQueue)
复杂，一般来说JDK不推荐使用。它可以防止资源耗尽的情况。
当使用maximumPoolSizes时，有界队列有助于防止资源耗尽，但可能较难调整和控制。
队列大小和最大池大小需要相互平衡才行：
a.使用大型队列、小型池：可以最大限度降低CPU使用率、操作系统资源、上下文切换开销，但可能导致人工降低吞吐量。
b.使用小型队列、大型池：CPU使用率较高，但可能遇到不可接受的调度开销，这样也会降低吞吐量。

优先级队列
根据任务的优先级执行任务，任务的优先级是通过自然顺序或者Comparator来定义的

拒绝策略分类
在RejectedExecutionHandler中默认有4种策略
AbortPolicy：处理程序遭到拒绝抛出 RejectedExecutionException，因此会中断调用者的处理过程；
CallerRunsPolicy： 线程调用运行该任务的execute本身。此策略提交简单的反馈控制机制，能够减缓新任务的提交速度。
DiscardPolicy：不能执行的任务将被删除。这种策略和AbortPolicy几乎一样，也是丢弃任务，只不过它不抛出异常。
DiscardOldestPolicy：如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）