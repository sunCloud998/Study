ConcurrentLinkedDeque类
ConcurrentLinkedDeque类是一个非阻塞的并发列表，并发列表允许不同的线程在同一时刻对列表的元素进行添加或删除，而不会产生任何数据不一致的问题

声明并初始化一个ConcurrentLinkedDeque对象
private ConcurrentLinkedDeque<String> list = new ConcurrentLinkedDeque<>();

添加元素
list.add(string);

取出元素
list.pollFirst();
list.pollLast();

pollFirst()
返回并删除列表的第一个元素，果列表为空，将返回一个null值

pollLast()
返回并删除列表的最后一个元素，果列表为空，将返回一个null值

size()
获取列表元素的数量，这个方法会返回一个并不真实的值，尤其是如果你使用这个方法，而有线程正在添加或删除列表的数据。这个方法必须遍历整个列表来计算元素而对于这个操作列表的内容可以改变。只有在没有任何线程修改列表的情况下，你使用这个方法时，你将保证这个返回值是正确的。

getFirst()
返回列表的第一个元素，它不会从列表删除返回的元素。如果列表为空，方法将抛出NoSuchElementException异常。

getLast()
返回列表的最后一个元素，它不会从列表删除返回的元素。如果列表为空，方法将抛出NoSuchElementException异常。

peek()、peekFirst()、peekLast()
这些方法将分别返回列表的第一个和最后一个元素。它们不会从列表删除返回的元素。如果列表为空，这些方法将返回null值。

remove()、removeFirst()、 removeLast()
这些方法将分别返回列表的第一个和最后一个元素。它们将从列表删除返回的元素。如果列表为空，这些方法将抛出NoSuchElementException异常。






